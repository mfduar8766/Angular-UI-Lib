import { __decorate } from 'tslib';
import {
  ComponentFactoryResolver,
  Directive,
  Input,
  OnInit,
  ViewContainerRef,
  Type,
  OnChanges,
  ComponentRef
} from '@angular/core';
import { FormButtonComponent } from './Components/form-button/form-button.component';
import { FormInputComponent } from './Components/form-input/form-input.component';
import { FormSelectComponent } from './Components/form-select/form-select.component';
import { FormDatePickerComponent } from './Components/form-date-picker/form-date-picker.component';
import { FormCheckboxComponent } from './Components/form-checkbox/form-checkbox.component';
import { FormRadioComponent } from './Components/form-radio/form-radio.component';
import { FormMultiSelectComponent } from './Components/form-multi-select/form-multi-select.component';
import { FormSliderComponent } from './Components/form-slider/form-slider.component';
const components = {
  button: FormButtonComponent,
  input: FormInputComponent,
  select: FormSelectComponent,
  date: FormDatePickerComponent,
  radiobutton: FormRadioComponent,
  checkbox: FormCheckboxComponent,
  multiSelect: FormMultiSelectComponent,
  slider: FormSliderComponent
};
let DynamicFieldDirective = class DynamicFieldDirective {
  constructor(resolver, container) {
    this.resolver = resolver;
    this.container = container;
  }
  ngOnChanges() {
    if (this.component) {
      this.component.instance.config = this.config;
      this.component.instance.group = this.group;
    }
  }
  ngOnInit() {
    if (!components[this.config.type]) {
      const supportedTypes = Object.keys(components).join(', ');
      throw new Error(`Trying to use an unsupported type (${this.config.type}).
        Supported types: ${supportedTypes}`);
    }
    const component = this.resolver.resolveComponentFactory(components[this.config.type]);
    this.component = this.container.createComponent(component);
    this.component.instance.config = this.config;
    this.component.instance.group = this.group;
  }
};
DynamicFieldDirective.ctorParameters = () => [{ type: ComponentFactoryResolver }, { type: ViewContainerRef }];
__decorate([Input()], DynamicFieldDirective.prototype, 'config', void 0);
__decorate([Input()], DynamicFieldDirective.prototype, 'group', void 0);
DynamicFieldDirective = __decorate(
  [
    Directive({
      selector: '[appDynamicField]'
    })
  ],
  DynamicFieldDirective
);
export { DynamicFieldDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1maWVsZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWNvbW1vbi1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29tbW9uLXJlYWN0aXZlLWZvcm0vZHluYW1pYy1maWVsZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCx3QkFBd0IsRUFDeEIsU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sZ0JBQWdCLEVBQ2hCLElBQUksRUFDSixTQUFTLEVBQ1QsWUFBWSxHQUNiLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBR3JGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQ25HLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQzNGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDREQUE0RCxDQUFDO0FBQ3RHLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBRXJGLE1BQU0sVUFBVSxHQUFvQztJQUNsRCxNQUFNLEVBQUUsbUJBQW1CO0lBQzNCLEtBQUssRUFBRSxrQkFBa0I7SUFDekIsTUFBTSxFQUFFLG1CQUFtQjtJQUMzQixJQUFJLEVBQUUsdUJBQXVCO0lBQzdCLFdBQVcsRUFBRSxrQkFBa0I7SUFDL0IsUUFBUSxFQUFFLHFCQUFxQjtJQUMvQixXQUFXLEVBQUUsd0JBQXdCO0lBQ3JDLE1BQU0sRUFBRSxtQkFBbUI7Q0FDNUIsQ0FBQztBQUtGLElBQWEscUJBQXFCLEdBQWxDLE1BQWEscUJBQXFCO0lBS2hDLFlBQ1UsUUFBa0MsRUFDbEMsU0FBMkI7UUFEM0IsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7UUFDbEMsY0FBUyxHQUFULFNBQVMsQ0FBa0I7SUFDbEMsQ0FBQztJQUVKLFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDN0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDNUM7SUFDSCxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNqQyxNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMxRCxNQUFNLElBQUksS0FBSyxDQUNiLHNDQUFzQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUk7MkJBQ25DLGNBQWMsRUFBRSxDQUNwQyxDQUFDO1NBQ0g7UUFDRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUNyRCxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FDN0IsQ0FBQztRQUNGLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDN0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDN0MsQ0FBQztDQUNGLENBQUE7O1lBMUJxQix3QkFBd0I7WUFDdkIsZ0JBQWdCOztBQU41QjtJQUFSLEtBQUssRUFBRTtxREFBcUI7QUFDcEI7SUFBUixLQUFLLEVBQUU7b0RBQWtCO0FBRmYscUJBQXFCO0lBSGpDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxtQkFBbUI7S0FDOUIsQ0FBQztHQUNXLHFCQUFxQixDQWdDakM7U0FoQ1kscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICBEaXJlY3RpdmUsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIFZpZXdDb250YWluZXJSZWYsXG4gIFR5cGUsXG4gIE9uQ2hhbmdlcyxcbiAgQ29tcG9uZW50UmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEZvcm1CdXR0b25Db21wb25lbnQgfSBmcm9tICcuL0NvbXBvbmVudHMvZm9ybS1idXR0b24vZm9ybS1idXR0b24uY29tcG9uZW50JztcbmltcG9ydCB7IEZvcm1JbnB1dENvbXBvbmVudCB9IGZyb20gJy4vQ29tcG9uZW50cy9mb3JtLWlucHV0L2Zvcm0taW5wdXQuY29tcG9uZW50JztcbmltcG9ydCB7IEZvcm1TZWxlY3RDb21wb25lbnQgfSBmcm9tICcuL0NvbXBvbmVudHMvZm9ybS1zZWxlY3QvZm9ybS1zZWxlY3QuY29tcG9uZW50JztcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnLi9Nb2RlbHMgL2ZpZWxkLmludGVyZmFjZSc7XG5pbXBvcnQgeyBGaWVsZENvbmZpZyB9IGZyb20gJy4vTW9kZWxzIC9maWVsZENvbmZpZy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRm9ybURhdGVQaWNrZXJDb21wb25lbnQgfSBmcm9tICcuL0NvbXBvbmVudHMvZm9ybS1kYXRlLXBpY2tlci9mb3JtLWRhdGUtcGlja2VyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGb3JtQ2hlY2tib3hDb21wb25lbnQgfSBmcm9tICcuL0NvbXBvbmVudHMvZm9ybS1jaGVja2JveC9mb3JtLWNoZWNrYm94LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGb3JtUmFkaW9Db21wb25lbnQgfSBmcm9tICcuL0NvbXBvbmVudHMvZm9ybS1yYWRpby9mb3JtLXJhZGlvLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGb3JtTXVsdGlTZWxlY3RDb21wb25lbnQgfSBmcm9tICcuL0NvbXBvbmVudHMvZm9ybS1tdWx0aS1zZWxlY3QvZm9ybS1tdWx0aS1zZWxlY3QuY29tcG9uZW50JztcbmltcG9ydCB7IEZvcm1TbGlkZXJDb21wb25lbnQgfSBmcm9tICcuL0NvbXBvbmVudHMvZm9ybS1zbGlkZXIvZm9ybS1zbGlkZXIuY29tcG9uZW50JztcblxuY29uc3QgY29tcG9uZW50czogeyBbdHlwZTogc3RyaW5nXTogVHlwZTxGaWVsZD4gfSA9IHtcbiAgYnV0dG9uOiBGb3JtQnV0dG9uQ29tcG9uZW50LFxuICBpbnB1dDogRm9ybUlucHV0Q29tcG9uZW50LFxuICBzZWxlY3Q6IEZvcm1TZWxlY3RDb21wb25lbnQsXG4gIGRhdGU6IEZvcm1EYXRlUGlja2VyQ29tcG9uZW50LFxuICByYWRpb2J1dHRvbjogRm9ybVJhZGlvQ29tcG9uZW50LFxuICBjaGVja2JveDogRm9ybUNoZWNrYm94Q29tcG9uZW50LFxuICBtdWx0aVNlbGVjdDogRm9ybU11bHRpU2VsZWN0Q29tcG9uZW50LFxuICBzbGlkZXI6IEZvcm1TbGlkZXJDb21wb25lbnRcbn07XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1thcHBEeW5hbWljRmllbGRdJyxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY0ZpZWxkRGlyZWN0aXZlIGltcGxlbWVudHMgRmllbGQsIE9uQ2hhbmdlcywgT25Jbml0IHtcbiAgQElucHV0KCkgY29uZmlnOiBGaWVsZENvbmZpZztcbiAgQElucHV0KCkgZ3JvdXA6IEZvcm1Hcm91cDtcbiAgY29tcG9uZW50OiBDb21wb25lbnRSZWY8RmllbGQ+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBwcml2YXRlIGNvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZlxuICApIHt9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgaWYgKHRoaXMuY29tcG9uZW50KSB7XG4gICAgICB0aGlzLmNvbXBvbmVudC5pbnN0YW5jZS5jb25maWcgPSB0aGlzLmNvbmZpZztcbiAgICAgIHRoaXMuY29tcG9uZW50Lmluc3RhbmNlLmdyb3VwID0gdGhpcy5ncm91cDtcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoIWNvbXBvbmVudHNbdGhpcy5jb25maWcudHlwZV0pIHtcbiAgICAgIGNvbnN0IHN1cHBvcnRlZFR5cGVzID0gT2JqZWN0LmtleXMoY29tcG9uZW50cykuam9pbignLCAnKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFRyeWluZyB0byB1c2UgYW4gdW5zdXBwb3J0ZWQgdHlwZSAoJHt0aGlzLmNvbmZpZy50eXBlfSkuXG4gICAgICAgIFN1cHBvcnRlZCB0eXBlczogJHtzdXBwb3J0ZWRUeXBlc31gXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLnJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5PEZpZWxkPihcbiAgICAgIGNvbXBvbmVudHNbdGhpcy5jb25maWcudHlwZV1cbiAgICApO1xuICAgIHRoaXMuY29tcG9uZW50ID0gdGhpcy5jb250YWluZXIuY3JlYXRlQ29tcG9uZW50KGNvbXBvbmVudCk7XG4gICAgdGhpcy5jb21wb25lbnQuaW5zdGFuY2UuY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgdGhpcy5jb21wb25lbnQuaW5zdGFuY2UuZ3JvdXAgPSB0aGlzLmdyb3VwO1xuICB9XG59XG4iXX0=
